name: 'Execute tests'
description: 'Execute tests on python'
inputs:
  python-version:
    description: 'Python version'
    required: true
  pypi-user:
    description: 'PyPi user'
    required: true
  pypi-password:
    description: 'PyPi password'
    required: true
  all_extras:
    description: 'Install All Extras'
    required: false
    default: 'false'
  sonar-version:
    description: 'Sonar version'
    required: true
  sonar-token:
    description: 'Sonar token'
    required: true
  sonar-url:
    description: 'Sonar URl'
    required: true
  strict:
    description: 'Strict mode'
    required: false
    default: 'true'
  project-version:
    description: 'Version of project'
    required: false
    default: 'latest'
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
    - name: Install host dependencies
      shell: bash
      run: sudo apt update && sudo apt-get install -y locales locales-all libcurl4-openssl-dev libssl-dev
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: /opt/hostedtoolcache/Python/${{ inputs.python-version }}/x64/
        key: python${{ inputs.python-version }}-${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
    - name: Install Dependencies
      env:
        PYPI_USER: ${{ inputs.pypi-user }}
        PYPI_PASSWORD: ${{ inputs.pypi-password }}
      shell: bash
      run: |
        pip install poetry
        poetry config virtualenvs.create false
        poetry config http-basic.zapay-pypi $PYPI_USER $PYPI_PASSWORD
        if [ "${{ inputs.all_extras }}" = "true" ]; then
          poetry install --all-extras --no-interaction --no-ansi -vvv
        else
          poetry install --no-interaction --no-ansi -vvv
        fi
    - name: Tests
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
        echo Load Envs
        set -a
        source pytest.env
        set +a
        echo Running Tests
        pytest src --cov --cov-config setup.cfg --cov-report xml:coverage.xml
    - name: Upload coverage to the next step
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ github.run_id }}
        path: coverage.xml
    - name: Sonar Cache
      uses: actions/cache@v3
      with:
        path: /opt/hostedtoolcache/sonar-scanner
        key: sonar-scanner-${{ runner.os }}-${{ runner.arch }}-${{ inputs.sonar-version }}
    - name: Setup sonarqube
      uses: warchant/setup-sonar-scanner@v3
      with:
        version: ${{ inputs.sonar-version }}
    - name: Download coverage
      if: inputs.coverage == 'true'
      uses: actions/download-artifact@v4
      with:
        name: coverage-${{ github.run_id }}
        path: .
    - name: SonarQube Scan
      shell: bash
      run: sonar-scanner -Dsonar.projectBaseDir=. -Dsonar.projectVersion=$PROJECT_VERSION
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-url }}
        PROJECT_VERSION: ${{ inputs.project-version }}
    - name: Sonar Check
      uses: sonarsource/sonarqube-quality-gate-action@master
      continue-on-error: ${{ inputs.strict == 'false' }}
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
