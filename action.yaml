name: 'Execute tests'
description: 'Execute tests on python'
inputs:
  doppler-token-tests:
    description: 'Doppler token for tests'
    required: true
  python-version:
    description: 'Python version'
    required: true
  org-github-token:
    description: 'git token'
    required: true
  github_token:
    description: 'git token'
    required: true
  pypi-user:
    description: 'PyPi user'
    required: true
  pypi-password:
    description: 'PyPi password'
    required: true
  all_extras:
    description: 'Install All Extras'
    required: false
    default: 'false'
  sonar-version:
    description: 'Sonar version'
    required: true
  sonar-token:
    description: 'Sonar token'
    required: true
  sonar-url:
    description: 'Sonar URl'
    required: true
  continue-on-error:
    description: 'Strict mode'
    required: false
    default: false
  project-version:
    description: 'Version of project'
    required: false
    default: 'latest'
  clean-run:
    description: 'Run with tests'
    type: boolean
    required: false
    default: false
  sonar-bypass:
    description: 'Sonar bypass'
    type: boolean
    required: false
    default: false
    
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      if: |
        inputs.clean-run == 'false'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
    - name: Install host dependencies
      if: |
        inputs.clean-run == 'false'
      shell: bash
      run: sudo apt update && sudo apt-get install -y locales locales-all libcurl4-openssl-dev libssl-dev libxml2-dev libxslt-dev
    - name: Cache pip
      if: |
        inputs.clean-run == 'false'
      uses: actions/cache@v3
      with:
        path: /opt/hostedtoolcache/Python/${{ inputs.python-version }}/x64/
        key: python${{ inputs.python-version }}-${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
    - name: Install Dependencies
      if: |
        inputs.clean-run == 'false'
      env:
        PYPI_USER: ${{ inputs.pypi-user }}
        PYPI_PASSWORD: ${{ inputs.pypi-password }}
      shell: bash
      run: |
        pip install -r requirements.txt
    - name: Tests
      if: |
        inputs.clean-run == 'false'
      env:
        DOPPLER_TOKEN: ${{ inputs.doppler-token-tests }}
      shell: bash
      run: |
        echo Installing Doppler
        sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
        curl -sLf --retry 3 --tlsv1.2 --proto "=https" 'https://packages.doppler.com/public/cli/gpg.DE2A7741A397C129.key' | sudo gpg --dearmor -o /usr/share/keyrings/doppler-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/doppler-archive-keyring.gpg] https://packages.doppler.com/public/cli/deb/debian any-version main" | sudo tee /etc/apt/sources.list.d/doppler-cli.list
        sudo apt-get update && sudo apt-get install doppler
        echo Doppler Installed
        echo Running Tests
        doppler run -- coverage run manage.py test -k -v 0 --exclude-tag=zwallet
        echo Test Runnered
        coverage xml
        echo Coverage generated
    - name: Upload coverage to the next step
      if: |
        inputs.clean-run == 'false'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ github.run_id }}
        path: coverage.xml
    - name: Validate version
      if: |
        inputs.sonar-bypass == 'false'
      id: validate-version
      uses: zapay-pagamentos/zpy-platform-k8s-validate-version-action@v2
    - name: Sonar Cache
      uses: actions/cache@v3
      if: |
        inputs.sonar-bypass == 'false'
      with:
        path: /opt/hostedtoolcache/sonar-scanner
        key: sonar-scanner-${{ runner.os }}-${{ runner.arch }}-${{ steps.validate-version.outputs.versionCandidate }}
    - name: Setup sonarqube
      if: |
        inputs.sonar-bypass == 'false'
      uses: warchant/setup-sonar-scanner@v3
      with:
        version: '4.7.0.2747'
    - name: Download coverage
      uses: actions/download-artifact@v3
      if: |
        inputs.sonar-bypass == 'false'
      continue-on-error: true
      with:
        name: coverage-${{ github.run_id }}
        path: .
    - name: SonarQube Scan
      if: |
        inputs.sonar-bypass == 'false'
      shell: bash
      run: sonar-scanner -Dsonar.projectBaseDir=. -Dsonar.projectVersion=${{ steps.validate-version.outputs.versionCandidate }}
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-url }}
    - name: Sonar Check
      if: |
        inputs.continue-on-error == 'true' &&
        inputs.sonar-bypass == 'false'
      uses: sonarsource/sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
